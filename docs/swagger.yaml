openapi: 3.0.0
info:
  title: Atlan Lily API
  description: API for real-time metadata ingestion and consumption
  version: 1.0.0
  contact:
    name: Atlan Support
    email: support@atlan.com

servers:
  - url: https://api.atlan-lily.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    MonteCarloWebhook:
      type: apiKey
      in: header
      name: X-Monte-Carlo-Signature

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    MonteCarloWebhook:
      type: object
      required:
        - id
        - type
        - timestamp
        - data
      properties:
        id:
          type: string
        type:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            incident_id:
              type: string
            severity:
              type: string
            status:
              type: string
            description:
              type: string

    SecurityRule:
      type: object
      required:
        - rule_type
        - asset_id
        - asset_type
        - conditions
        - actions
      properties:
        rule_type:
          type: string
          enum: [PII, GDPR, CUSTOM]
        asset_id:
          type: string
        asset_type:
          type: string
        conditions:
          type: array
          items:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
              operator:
                type: string
              value:
                type: string
        actions:
          type: array
          items:
            type: object
            required:
              - type
            properties:
              type:
                type: string
              parameters:
                type: object

    Event:
      type: object
      properties:
        event_id:
          type: string
        event_type:
          type: string
        timestamp:
          type: string
          format: date-time
        source:
          type: string
        status:
          type: string
        payload:
          type: object

paths:
  /webhooks/monte-carlo:
    post:
      summary: Handle webhook events from Monte Carlo
      security:
        - MonteCarloWebhook: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonteCarloWebhook'
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  event_id:
                    type: string
                  status:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{event_id}:
    get:
      summary: Get event details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /security/rules:
    post:
      summary: Create a new security rule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityRule'
      responses:
        '201':
          description: Security rule created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rule_id:
                    type: string
                  status:
                    type: string
                  downstream_rules:
                    type: object
                    properties:
                      snowflake:
                        type: object
                      databricks:
                        type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Query security rules
      security:
        - BearerAuth: []
      parameters:
        - name: rule_type
          in: query
          schema:
            type: string
        - name: asset_id
          in: query
          schema:
            type: string
        - name: asset_type
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Security rules retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rules:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecurityRule'
                  next_token:
                    type: string

  /security/rules/{rule_id}:
    put:
      summary: Update an existing security rule
      security:
        - BearerAuth: []
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityRule'
      responses:
        '200':
          description: Security rule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rule_id:
                    type: string
                  status:
                    type: string
                  downstream_rules:
                    type: object
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a security rule
      security:
        - BearerAuth: []
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Security rule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rule_id:
                    type: string
                  status:
                    type: string
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events:
    get:
      summary: Query events
      security:
        - BearerAuth: []
      parameters:
        - name: event_type
          in: query
          schema:
            type: string
        - name: source
          in: query
          schema:
            type: string
        - name: tenant_id
          in: query
          schema:
            type: string
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  next_token:
                    type: string 